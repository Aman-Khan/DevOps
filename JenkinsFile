
/**
 * A simple Declarative Jenkinsfile with four dummy stages and post-build actions.
 * This file can be used directly in a Jenkins Pipeline job.
 */
pipeline {
    // 1. Agent Declaration
    // Specifies where the entire Pipeline will execute. 'any' means any available agent.
    agent any

    // 2. Stages Section
    // This section contains the main work of the pipeline, broken into distinct stages.
    stages {
        // Stage 1: Build
        // A simple dummy stage to simulate a build process.
        stage('Build') {
            steps {
                echo 'This is the Build stage. Compiling code, running linters, etc.'
                // In a real scenario, you would have commands like:
                // sh 'mvn clean install'
                // sh 'npm install'
            }
        }

        // Stage 2: Test
        // A dummy stage for running automated tests.
        stage('Test') {
            steps {
                echo 'This is the Test stage. Running unit tests, integration tests, etc.'
                // In a real scenario, you would have commands like:
                // sh 'mvn test'
                // sh 'npm test'
            }
        }

        // Stage 3: Deploy to Staging
        // A dummy stage to simulate deployment to a staging/testing environment.
        stage('Deploy to Staging') {
            steps {
                echo 'This is the Deploy to Staging stage.'
                // In a real scenario, you might have commands like:
                // sh './deploy-staging.sh'
            }
        }

        // Stage 4: Deploy to Production
        // A dummy stage to simulate deployment to the production environment.
        stage('Deploy to Production') {
            steps {
                echo 'This is the Deploy to Production stage.'
                // This stage might have manual approval steps in a real pipeline.
                // Example: input message: 'Deploy to Production?'
                // sh './deploy-prod.sh'
            }
        }
    }

    // 3. Post-Build Actions Section
    // This section defines actions that run after all the stages are completed.
    post {
        // 'always' will run regardless of the pipeline's success or failure.
        always {
            echo 'This will always run at the end of the pipeline.'
            // Useful for cleanup tasks, like deleting temporary files.
            // cleanWs()
        }

        // 'success' will only run if the entire pipeline is successful.
        success {
            echo 'Pipeline was successful! Hooray!'
            // Useful for sending success notifications.
            // mail to: 'team@example.com', subject: 'SUCCESS: Pipeline complete'
        }

        // 'failure' will only run if the pipeline fails at any stage.
        failure {
            echo 'Pipeline has failed. Oh no!'
            // Useful for sending failure notifications.
            // mail to: 'team@example.com', subject: 'FAILURE: Pipeline failed'
        }

        // 'unstable' runs if the pipeline is marked as unstable (e.g., tests failed but didn't abort the build).
        unstable {
            echo 'Pipeline is unstable. Some tests might have failed.'
        }
    }
}
